[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
eclipse.project.name = appName + '-core'

def static getOsString() {
	String vendor = System.getProperty("java.vendor");
	if ("The Android Project" == vendor) {
		return "android";
	} else {
		String osName = System.getProperty("os.name");
		osName = osName.toLowerCase(Locale.ENGLISH);
		if (osName.startsWith("windows")) {
			return "windows";
		} else if (osName.startsWith("mac os")) {
			return "apple";
		} else if (osName.startsWith("linux")) {
			return "linux";
		} else if (osName.startsWith("sun")) {
			return "sun"
		}
		return "unknown"
	}
}

def static getArchString() {
	String osArch = System.getProperty("os.arch");
	osArch = osArch.toLowerCase(Locale.ENGLISH);
	if ("i386" == osArch || "x86" == osArch || "i686" == osArch) {
		return "x86";
	} else if (osArch.startsWith("amd64") || osArch.startsWith("x86_64")) {
		return "x86_64";
	} else if (osArch.startsWith("arm64")) {
		return "arm64";
	} else if (osArch.startsWith("arm")) {
		return "arm";
	} else if ("ppc" == osArch || "powerpc" == osArch) {
		return "ppc";
	} else if (osArch.startsWith("ppc")) {
		return "ppc_64";
	} else if (osArch.startsWith("sparc")) {
		return "sparc";
	} else if (osArch.startsWith("mips64")) {
		return "mips64";
	} else if (osArch.startsWith("mips")) {
		return "mips";
	} else if (osArch.contains("risc")) {
		return "risc";
	}
	return "unknown";
}

dependencies {
	api "com.badlogicgames.gdx:gdx:$gdxVersion"
	api "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
	api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
	api "io.github.libktx:ktx-freetype:$ktxFreetypeVersion"
	api "io.github.libktx:ktx-async:$ktxAsyncVersion"
	api "io.github.libktx:ktx-freetype-async:$ktxFreetypeAsyncVersion"
	api "de.tomgrill.gdxdialogs:gdx-dialogs-core:$dialogsVersion"
	api "space.earlygrey:shapedrawer:$shapeDrawerVersion"
	api "net.onedaybeard.artemis:artemis-odb:$artemisOdbVersion"
	api "io.github.libktx:ktx-graphics:$ktxGraphicsVersion"
	api "com.github.tommyettinger:colorful:$colorfulVersion"
	api "com.esotericsoftware:kryo:$kryoVersion"
	api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"
	api "io.github.libktx:ktx-box2d:$ktxBox2dVersion"
	api "io.github.libktx:ktx-math:$ktxMathVersion"
	api "com.github.crykn:kryonet:$kryoNetVersion"
	api "io.github.libktx:ktx-actors:$ktxActorsVersion"
	api "io.github.libktx:ktx-scene2d:$ktxScene2DVersion"
	api "io.github.libktx:ktx-assets:$ktxAssetsVersion"
	api "io.github.libktx:ktx-app:$ktxAppVersion"
	api "io.github.libktx:ktx-collections:$ktxCollectionsVersion"

	api "com.badlogicgames.gdx:gdx-box2d:$gdxVersion"

//	def jCudaClassifier = getOsString() + "-" + getArchString()
//	def jCudaVersion = "10.2.0"

//	implementation 'org.jcuda:jcuda-natives:${project.version}:${jcuda.os}-${jcuda.arch}'

//	implementation ("org.jcuda:jcuda:$jCudaVersion"){
//		transitive = false
//	}
//	implementation ("org.jcuda:jcudnn:$jCudaVersion") {
//		transitive = false
//	}
//	runtimeOnly ("org.jcuda:jcuda-natives:$jCudaVersion:$jCudaClassifier")
//	runtimeOnly ("org.jcuda:jcudnn-natives:$jCudaVersion:$jCudaClassifier")



	// custom libraries
	implementation "org.jetbrains.kotlinx:multik-api:0.1.1"
	implementation "org.jetbrains.kotlinx:multik-default:0.1.1"
	implementation "com.github.doyaaaaaken:kotlin-csv-jvm:1.2.0"
//	implementation "org.jcuda:jcuda:11.2.0"
	// https://mvnrepository.com/artifact/org.jcuda/jcublas
//	implementation "org.jcuda:jcublas:11.4.1"

	def classifier = getOsString() + "-" + getArchString()
	def jCudaVersion = "10.2.0" // 11.2.0
	implementation(group: 'org.jcuda', name: 'jcuda', version: jCudaVersion) {
		transitive = false
	}
	implementation(group: 'org.jcuda', name: 'jcublas', version: jCudaVersion) {
		transitive = false
	}

	implementation group: 'org.jcuda', name: 'jcuda-natives',
			classifier: classifier, version: jCudaVersion
	implementation group: 'org.jcuda', name: 'jcublas-natives',
			classifier: classifier, version: jCudaVersion
}
